* Terminal Configuration
** Configuration for ansi-term
#+BEGIN_SRC emacs-lisp
(defvar my-term-shell "/bin/zsh")
(defadvice ansi-term (before force-zsh)
  (interactive (list my-term-shell)))
(ad-activate 'ansi-term)
(global-set-key (kbd "<M-RET>") 'ansi-term)
#+END_SRC

* User Interface Settings
** Disabling the toolbar, the menubar and scrollbar
#+BEGIN_SRC emacs-lisp 
(tool-bar-mode -1)
(menu-bar-mode -1)
(scroll-bar-mode -1)
#+END_SRC

* Keybindings
** Keybinding for opening config file (config.org):
#+BEGIN_SRC emacs-lisp
  (defun config-visit ()
    (interactive)
    (find-file "~/.emacs.d/config.org")
    )
  (global-set-key (kbd "C-c e") 'config-visit)
#+END_SRC
** Keybinding for (re)loading config file (config.org):
#+BEGIN_SRC emacs-lisp
  (defun config-reload ()
      (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/config.org"))
    )
  (global-set-key (kbd "C-c r") 'config-reload)
#+END_SRC
** Keybinding for opening config file (init.el):
#+BEGIN_SRC emacs-lisp
  (defun conf-visit ()
    (interactive)
    (find-file "~/.emacs.d/init.el")
    )
  (global-set-key (kbd "C-c i") 'conf-visit)
#+END_SRC
** Keybinding for opening counsel-linux-app:
#+BEGIN_SRC emacs-lisp
(global-set-key (kbd "M-SPC") 'counsel-linux-app)
#+END_SRC
* Org-Mode Settings
** Setting files for org-agenda
#+BEGIN_SRC emacs-lisp
  (setq org-agenda-files (quote ("~/Dropbox/org/schedule.org")))
#+END_SRC
** Setting quick-hotkey for opening schedule file
#+BEGIN_SRC emacs-lisp
  (defun schedule-visit ()
    (interactive)
    (find-file "~/Dropbox/org/schedule.org")
    )
    (global-set-key (kbd "C-c o") 'schedule-visit)
#+END_SRC
** Setting org-mode source window to be the current window
#+BEGIN_SRC emacs-lisp
  (setq org-src-window-setup 'current-window)
#+END_SRC
** Org Mode Templates
*** Emacs Lisp
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC
* Package Configuration
** Package Installation and Configuration
*** (Using use-package to install packages and their configurations)
**** beacon
#+BEGIN_SRC emacs-lisp
(use-package beacon
  :ensure t
  :init
  (beacon-mode 1))
#+END_SRC

**** org-bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
**** ivy
#+BEGIN_SRC emacs-lisp
  (use-package counsel
    :ensure t
    :init
    (ivy-mode 1)
    :config
    (setq ivy-use-virtual-buffers t)
    (setq ivy-count-format "(%d/%d) ")
    (global-set-key (kbd "C-s") 'swiper)
    (global-set-key (kbd "M-x") 'counsel-M-x)
    (global-set-key (kbd "C-x C-f") 'counsel-find-file)
    )
#+END_SRC
**** avy
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind(
          ("M-s" . avy-goto-char))
    )
#+END_SRC

**** aggressive-indent-mode
#+BEGIN_SRC emacs-lisp
    (use-package aggressive-indent
      :ensure t
      :init (require 'aggressive-indent)
      :config
      (global-aggressive-indent-mode 1)
    )
#+END_SRC

**** smartparens
#+BEGIN_SRC emacs-lisp
  (use-package smartparens
    :ensure t
    :config
    (smartparens-global-mode 1)
)
#+END_SRC
**** cuda-mode
#+BEGIN_SRC emacs-lisp
  (use-package cuda-mode
    :ensure t
    )
#+END_SRC
**** magit
#+BEGIN_SRC emacs-lisp
  (use-package magit
    :ensure t
    :config
    (global-set-key (kbd "C-x g") 'magit-status)
    )
#+END_SRC
**** rust-mode
#+BEGIN_SRC emacs-lisp
  (use-package rust-mode
    :ensure t
    )
#+END_SRC
**** auctex
#+BEGIN_SRC emacs-lisp
  (use-package auctex
    :defer t
    :ensure t
    )
#+END_SRC
**** LaTex Preview Pane
#+BEGIN_SRC emacs-lisp
  (use-package latex-preview-pane
    :ensure t
    :init 
    (latex-preview-pane-enable)
    )
#+END_SRC
**** switch-window
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "j" "k" "l" ";"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
**** rainbow-mode
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (rainbow-mode 1))
#+END_SRC
**** rainbow-delimiters
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode)
    )
#+END_SRC
**** hungry-delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
**** sudo-edit
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("s-e" . sudo-edit))
#+END_SRC
**** dashboard
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dashboard-items '((recents . 10))))
#+END_SRC
**** symon
#+BEGIN_SRC emacs-lisp
  (use-package symon
    :ensure t
    :bind
    ("s-h" . symon-mode))
#+END_SRC
* Auto Completion
** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
* Diminishing minor modes
#+BEGIN_SRC emacs-lisp
  (use-package diminish
    :ensure t
    :init
    (diminish 'hungry-delete-mode)
    (diminish 'beacon-mode)
    (diminish 'subword-mode)
    (diminish 'rainbow-mode)
    )
#+END_SRC
* Miscellaneous
** Some QoL improvements:
*** Changing the yes-or-no behavior to y-or-n behavior:
#+BEGIN_SRC emacs-lisp
(defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC 

*** Set conservative scrolling:
#+BEGIN_SRC emacs-lisp
(setq scroll-conservatively 100)
#+END_SRC

*** Disabling the bell sound:
#+BEGIN_SRC emacs-lisp
(setq ring-bell-function 'ignore)
#+END_SRC

*** Enable highlight line mode
#+BEGIN_SRC emacs-lisp
(when window-system (global-hl-line-mode t))
#+END_SRC

*** Enable Global Prettify Symbols Mode
#+BEGIN_SRC emacs-lisp
(when window-system (global-prettify-symbols-mode t))
#+END_SRC

*** Changing the default backups directory
#+BEGIN_SRC emacs-lisp
(setq backup-directory-alist `(("." . "~/.emacs_backups")))
#+END_SRC

*** Enabling line numbers
#+BEGIN_SRC emacs-lisp
(global-linum-mode t)
#+END_SRC
*** Enabling ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ibuffer)
#+END_SRC
*** Splitting follows windows:
**** Split and follow horizontally
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
#+END_SRC
**** Split and follow vertically
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC
*** Show paren mode
#+BEGIN_SRC emacs-lisp
  (show-paren-mode 1)
#+END_SRC
*** subword
#+BEGIN_SRC emacs-lisp
  (global-subword-mode 1)
#+END_SRC
*** Kill the whole word
#+BEGIN_SRC emacs-lisp
(defun kill-whole-word ()
  (interactive)
  (backward-word)
  (kill-word 1)
  )

(global-set-key (kbd "C-c w") 'kill-whole-word)
#+END_SRC
*** Always kill the current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-curr-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-curr-buffer)
#+END_SRC
*** Copy the whole line
#+BEGIN_SRC emacs-lisp
  (defun copy-whole-line ()
    (interactive)
    (save-excursion
      (kill-new
       (buffer-substring
	(point-at-bol)
	(point-at-eol)))))
  (global-set-key (kbd "C-c C-c l") 'copy-whole-line)
#+END_SRC
*** kill-all-buffers
#+BEGIN_SRC emacs-lisp
  (defun kill-all-buffers ()
    (interactive)
    (mapc 'kill-buffer (buffer-list)))

  (global-set-key (kbd "C-M-s-k") 'kill-all-buffers)
#+END_SRC
*** clock in emacs
#+BEGIN_SRC emacs-lisp
  (display-time-mode 1)
#+END_SRC
** Application Launcher:
*** Counsel-Linux-App Settings
The following code snippet is not mine;
credit for the same goes to /u/gray_like_play over at reddit, at https://www.reddit.com/r/emacs/comments/7o1sjq/exwm_rofidmenu_replacement_for_starting/
#+BEGIN_SRC emacs-lisp
(push (concat (getenv "HOME") "/.local/share/applications/") counsel-linux-apps-directories)
(defun ds/counsel-linux-app-format-function (name comment exec)
  "Default Linux application name formatter.
 NAME is the name of the application, COMMENT its comment and EXEC
 the command to launch it."
  (format "% -45s %s"
          (propertize name 'face 'font-lock-builtin-face)
          (or comment "")))
(setq counsel-linux-app-format-function #'ds/counsel-linux-app-format-function)
#+END_SRC
** Spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote wave))
    (spaceline-emacs-theme))
#+END_SRC
